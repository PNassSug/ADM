'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.34209
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

'
'Este código-fonte foi gerado automaticamente por Microsoft.VSDesigner, Versão 4.0.30319.34209.
'
Namespace portal.excluir

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="ExcluiSoap", [Namespace]:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx")> _
    Partial Public Class Exclui
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private ExcluiEmpresasOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluiUsuarioEmpresaOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluiEmpresaUsuarioObrigacaoOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluiUsuarioEscritorioOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluiObrigacoesOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluiEscritoriosOperationCompleted As System.Threading.SendOrPostCallback

        Private useDefaultCredentialsSetExplicitly As Boolean

        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Administrativo.WS.My.MySettings.Default.Administrativo_WS_portal_excluir_Exclui
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub

        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true) _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false)) _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property

        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property

        '''<remarks/>
        Public Event ExcluiEmpresasCompleted As ExcluiEmpresasCompletedEventHandler

        '''<remarks/>
        Public Event ExcluiUsuarioEmpresaCompleted As ExcluiUsuarioEmpresaCompletedEventHandler

        '''<remarks/>
        Public Event ExcluiEmpresaUsuarioObrigacaoCompleted As ExcluiEmpresaUsuarioObrigacaoCompletedEventHandler

        '''<remarks/>
        Public Event ExcluiUsuarioEscritorioCompleted As ExcluiUsuarioEscritorioCompletedEventHandler

        '''<remarks/>
        Public Event ExcluiObrigacoesCompleted As ExcluiObrigacoesCompletedEventHandler

        '''<remarks/>
        Public Event ExcluiEscritoriosCompleted As ExcluiEscritoriosCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiEmpresas", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiEmpresas(ByVal escritorioCNPJ As String, ByVal empresa As String) As String
            Dim results() As Object = Me.Invoke("ExcluiEmpresas", New Object() {escritorioCNPJ, empresa})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiEmpresasAsync(ByVal escritorioCNPJ As String, ByVal empresa As String)
            Me.ExcluiEmpresasAsync(escritorioCNPJ, empresa, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiEmpresasAsync(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal userState As Object)
            If (Me.ExcluiEmpresasOperationCompleted Is Nothing) Then
                Me.ExcluiEmpresasOperationCompleted = AddressOf Me.OnExcluiEmpresasOperationCompleted
            End If
            Me.InvokeAsync("ExcluiEmpresas", New Object() {escritorioCNPJ, empresa}, Me.ExcluiEmpresasOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiEmpresasOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiEmpresasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiEmpresasCompleted(Me, New ExcluiEmpresasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiUsuarioEmpresa", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiUsuarioEmpresa(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal email As String) As String
            Dim results() As Object = Me.Invoke("ExcluiUsuarioEmpresa", New Object() {escritorioCNPJ, empresa, email})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiUsuarioEmpresaAsync(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal email As String)
            Me.ExcluiUsuarioEmpresaAsync(escritorioCNPJ, empresa, email, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiUsuarioEmpresaAsync(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal email As String, ByVal userState As Object)
            If (Me.ExcluiUsuarioEmpresaOperationCompleted Is Nothing) Then
                Me.ExcluiUsuarioEmpresaOperationCompleted = AddressOf Me.OnExcluiUsuarioEmpresaOperationCompleted
            End If
            Me.InvokeAsync("ExcluiUsuarioEmpresa", New Object() {escritorioCNPJ, empresa, email}, Me.ExcluiUsuarioEmpresaOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiUsuarioEmpresaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiUsuarioEmpresaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiUsuarioEmpresaCompleted(Me, New ExcluiUsuarioEmpresaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiEmpresaUsuarioObrig" & _
            "acao", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiEmpresaUsuarioObrigacao(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal emailUsuarioEmpresa As String, ByVal obrigacao As String) As String
            Dim results() As Object = Me.Invoke("ExcluiEmpresaUsuarioObrigacao", New Object() {escritorioCNPJ, empresa, emailUsuarioEmpresa, obrigacao})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiEmpresaUsuarioObrigacaoAsync(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal emailUsuarioEmpresa As String, ByVal obrigacao As String)
            Me.ExcluiEmpresaUsuarioObrigacaoAsync(escritorioCNPJ, empresa, emailUsuarioEmpresa, obrigacao, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiEmpresaUsuarioObrigacaoAsync(ByVal escritorioCNPJ As String, ByVal empresa As String, ByVal emailUsuarioEmpresa As String, ByVal obrigacao As String, ByVal userState As Object)
            If (Me.ExcluiEmpresaUsuarioObrigacaoOperationCompleted Is Nothing) Then
                Me.ExcluiEmpresaUsuarioObrigacaoOperationCompleted = AddressOf Me.OnExcluiEmpresaUsuarioObrigacaoOperationCompleted
            End If
            Me.InvokeAsync("ExcluiEmpresaUsuarioObrigacao", New Object() {escritorioCNPJ, empresa, emailUsuarioEmpresa, obrigacao}, Me.ExcluiEmpresaUsuarioObrigacaoOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiEmpresaUsuarioObrigacaoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiEmpresaUsuarioObrigacaoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiEmpresaUsuarioObrigacaoCompleted(Me, New ExcluiEmpresaUsuarioObrigacaoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiUsuarioEscritorio", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiUsuarioEscritorio(ByVal escritorioCNPJ As String, ByVal login As String) As String
            Dim results() As Object = Me.Invoke("ExcluiUsuarioEscritorio", New Object() {escritorioCNPJ, login})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiUsuarioEscritorioAsync(ByVal escritorioCNPJ As String, ByVal login As String)
            Me.ExcluiUsuarioEscritorioAsync(escritorioCNPJ, login, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiUsuarioEscritorioAsync(ByVal escritorioCNPJ As String, ByVal login As String, ByVal userState As Object)
            If (Me.ExcluiUsuarioEscritorioOperationCompleted Is Nothing) Then
                Me.ExcluiUsuarioEscritorioOperationCompleted = AddressOf Me.OnExcluiUsuarioEscritorioOperationCompleted
            End If
            Me.InvokeAsync("ExcluiUsuarioEscritorio", New Object() {escritorioCNPJ, login}, Me.ExcluiUsuarioEscritorioOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiUsuarioEscritorioOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiUsuarioEscritorioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiUsuarioEscritorioCompleted(Me, New ExcluiUsuarioEscritorioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiObrigacoes", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiObrigacoes(ByVal escritorioCNPJ As String, ByVal obrigacao As String) As String
            Dim results() As Object = Me.Invoke("ExcluiObrigacoes", New Object() {escritorioCNPJ, obrigacao})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiObrigacoesAsync(ByVal escritorioCNPJ As String, ByVal obrigacao As String)
            Me.ExcluiObrigacoesAsync(escritorioCNPJ, obrigacao, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiObrigacoesAsync(ByVal escritorioCNPJ As String, ByVal obrigacao As String, ByVal userState As Object)
            If (Me.ExcluiObrigacoesOperationCompleted Is Nothing) Then
                Me.ExcluiObrigacoesOperationCompleted = AddressOf Me.OnExcluiObrigacoesOperationCompleted
            End If
            Me.InvokeAsync("ExcluiObrigacoes", New Object() {escritorioCNPJ, obrigacao}, Me.ExcluiObrigacoesOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiObrigacoesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiObrigacoesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiObrigacoesCompleted(Me, New ExcluiObrigacoesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.grupocandinho.com.br/WebServices/Exclui.asmx/ExcluiEscritorios", RequestNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", ResponseNamespace:="http://www.grupocandinho.com.br/WebServices/Exclui.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExcluiEscritorios(ByVal escritorioCNPJ As String) As String
            Dim results() As Object = Me.Invoke("ExcluiEscritorios", New Object() {escritorioCNPJ})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ExcluiEscritoriosAsync(ByVal escritorioCNPJ As String)
            Me.ExcluiEscritoriosAsync(escritorioCNPJ, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluiEscritoriosAsync(ByVal escritorioCNPJ As String, ByVal userState As Object)
            If (Me.ExcluiEscritoriosOperationCompleted Is Nothing) Then
                Me.ExcluiEscritoriosOperationCompleted = AddressOf Me.OnExcluiEscritoriosOperationCompleted
            End If
            Me.InvokeAsync("ExcluiEscritorios", New Object() {escritorioCNPJ}, Me.ExcluiEscritoriosOperationCompleted, userState)
        End Sub

        Private Sub OnExcluiEscritoriosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluiEscritoriosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluiEscritoriosCompleted(Me, New ExcluiEscritoriosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub

        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing) _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024) _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiEmpresasCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiEmpresasCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiEmpresasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiUsuarioEmpresaCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiUsuarioEmpresaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiUsuarioEmpresaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiEmpresaUsuarioObrigacaoCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiEmpresaUsuarioObrigacaoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiEmpresaUsuarioObrigacaoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiUsuarioEscritorioCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiUsuarioEscritorioCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiUsuarioEscritorioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiObrigacoesCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiObrigacoesCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiObrigacoesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")> _
    Public Delegate Sub ExcluiEscritoriosCompletedEventHandler(ByVal sender As Object, ByVal e As ExcluiEscritoriosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExcluiEscritoriosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
End Namespace
